// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/cloud/gcp/runtime/core (interfaces: GcpProvider)

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nitrictech/nitric/core/pkg/api/nitric/v1"
	resource "github.com/nitrictech/nitric/core/pkg/plugins/resource"
)

// MockGcpProvider is a mock of GcpProvider interface.
type MockGcpProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGcpProviderMockRecorder
}

// MockGcpProviderMockRecorder is the mock recorder for MockGcpProvider.
type MockGcpProviderMockRecorder struct {
	mock *MockGcpProvider
}

// NewMockGcpProvider creates a new mock instance.
func NewMockGcpProvider(ctrl *gomock.Controller) *MockGcpProvider {
	mock := &MockGcpProvider{ctrl: ctrl}
	mock.recorder = &MockGcpProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpProvider) EXPECT() *MockGcpProviderMockRecorder {
	return m.recorder
}

// Declare mocks base method.
func (m *MockGcpProvider) Declare(arg0 context.Context, arg1 *v1.ResourceDeclareRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Declare", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Declare indicates an expected call of Declare.
func (mr *MockGcpProviderMockRecorder) Declare(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Declare", reflect.TypeOf((*MockGcpProvider)(nil).Declare), arg0, arg1)
}

// Details mocks base method.
func (m *MockGcpProvider) Details(arg0 context.Context, arg1, arg2 string) (*resource.DetailsResponse[interface{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Details", arg0, arg1, arg2)
	ret0, _ := ret[0].(*resource.DetailsResponse[interface{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Details indicates an expected call of Details.
func (mr *MockGcpProviderMockRecorder) Details(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockGcpProvider)(nil).Details), arg0, arg1, arg2)
}

// GetProjectID mocks base method.
func (m *MockGcpProvider) GetProjectID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectID indicates an expected call of GetProjectID.
func (mr *MockGcpProviderMockRecorder) GetProjectID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectID", reflect.TypeOf((*MockGcpProvider)(nil).GetProjectID))
}

// GetServiceAccountEmail mocks base method.
func (m *MockGcpProvider) GetServiceAccountEmail() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountEmail")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountEmail indicates an expected call of GetServiceAccountEmail.
func (mr *MockGcpProviderMockRecorder) GetServiceAccountEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountEmail", reflect.TypeOf((*MockGcpProvider)(nil).GetServiceAccountEmail))
}
